Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -I/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/include -std=c99 -Wall -O3 -xAVX2 -g -qopt-report=5 -simd -lm -o d2q9-bgk -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib/release -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib -Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib/release -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib -lmpifort -lmpi -ldl -lrt -lpthread

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/13=7.7%] d2q9-bgk.c(141,1)
  -> INLINE: (159,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (907,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (908,3) exit(int)
  -> EXTERN: (168,3) MPI_Init(int *, char ***)
  -> EXTERN: (169,3) MPI_Comm_size(MPI_Comm, int *)
  -> EXTERN: (170,3) MPI_Comm_rank(MPI_Comm, int *)
  -> EXTERN: (173,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (176,3) initialise(const char *, const char *, t_param *, t_speed *, t_speed *, int **, float **, int, int) (isz = 1278) (sz = 1301)
     [[ Inlining would exceed -inline-max-size value (1301>230) <1>]]
  -> EXTERN: (178,3) printf(const char *__restrict__, ...)
  -> INLINE: (181,3) finalise(const t_param *, t_speed *, t_speed *, int **, float **) (isz = 58) (sz = 73)
    -> EXTERN: (749,3) _mm_free(void *)
    -> EXTERN: (750,3) _mm_free(void *)
    -> EXTERN: (751,3) _mm_free(void *)
    -> EXTERN: (752,3) _mm_free(void *)
    -> EXTERN: (753,3) _mm_free(void *)
    -> EXTERN: (754,3) _mm_free(void *)
    -> EXTERN: (755,3) _mm_free(void *)
    -> EXTERN: (756,3) _mm_free(void *)
    -> EXTERN: (757,3) _mm_free(void *)
    -> EXTERN: (759,3) _mm_free(void *)
    -> EXTERN: (760,3) _mm_free(void *)
    -> EXTERN: (761,3) _mm_free(void *)
    -> EXTERN: (762,3) _mm_free(void *)
    -> EXTERN: (763,3) _mm_free(void *)
    -> EXTERN: (764,3) _mm_free(void *)
    -> EXTERN: (765,3) _mm_free(void *)
    -> EXTERN: (766,3) _mm_free(void *)
    -> EXTERN: (767,3) _mm_free(void *)
    -> EXTERN: (769,3) _mm_free(void *)
    -> EXTERN: (772,3) free(void *)
  -> EXTERN: (182,3) MPI_Finalize(void)
  -> EXTERN: (183,3) printf(const char *__restrict__, ...)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(141,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:141

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbx rsi rdi r8-r9 r15]
        
    Routine temporaries
        Total         :      96
            Global    :       8
            Local     :      88
        Regenerable   :      34
        Spilled       :       2
        
    Routine stack
        Variables     :     228 bytes*
            Reads     :      27 [2.40e+01 ~ 24.0%]
            Writes    :       8 [7.39e+00 ~ 7.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float)) [2/13=15.4%] d2q9-bgk.c(256,32)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(292,5)
<Peeled loop for vectorization, Predicate Optimized v1>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk.c(292,5)
<Predicate Optimized v1>
   remark #25422: Invariant Condition at line 298 hoisted out of this loop
   remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(306,32) ]
   remark #15389: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(307,32) ]
   remark #15389: vectorization support: reference cells->speeds2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(308,32) ]
   remark #15389: vectorization support: reference cells->speeds3[x_e+jj*params.nx] has unaligned access   [ d2q9-bgk.c(309,32) ]
   remark #15389: vectorization support: reference cells->speeds4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(310,32) ]
   remark #15389: vectorization support: reference cells->speeds5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(311,32) ]
   remark #15389: vectorization support: reference cells->speeds6[x_e+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(312,32) ]
   remark #15389: vectorization support: reference cells->speeds7[x_e+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(313,32) ]
   remark #15389: vectorization support: reference cells->speeds8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(314,32) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(323,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(324,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(325,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(326,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(327,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(328,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(329,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(330,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(369,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(370,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(371,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(372,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(373,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(374,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(375,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(376,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(377,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(398,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(398,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(399,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(399,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(400,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(400,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(402,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(402,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(403,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(403,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(404,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(404,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(323,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(324,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(325,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(326,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(327,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(328,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(329,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(330,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(370,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(371,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(372,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(373,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(374,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(375,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(376,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(377,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.323
   remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(260,16) ]
   remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(259,20) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 35 
   remark #15451: unmasked unaligned unit stride stores: 22 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 309 
   remark #15477: vector cost: 82.000 
   remark #15478: estimated potential speedup: 3.360 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(292,5)
<Remainder loop for vectorization, Predicate Optimized v1>
LOOP END

LOOP BEGIN at d2q9-bgk.c(292,5)
<Peeled loop for vectorization, Predicate Optimized v2>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk.c(292,5)
<Predicate Optimized v2>
   remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(306,32) ]
   remark #15389: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(307,32) ]
   remark #15389: vectorization support: reference cells->speeds2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(308,32) ]
   remark #15389: vectorization support: reference cells->speeds3[x_e+jj*params.nx] has unaligned access   [ d2q9-bgk.c(309,32) ]
   remark #15389: vectorization support: reference cells->speeds4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(310,32) ]
   remark #15389: vectorization support: reference cells->speeds5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(311,32) ]
   remark #15389: vectorization support: reference cells->speeds6[x_e+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(312,32) ]
   remark #15389: vectorization support: reference cells->speeds7[x_e+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(313,32) ]
   remark #15389: vectorization support: reference cells->speeds8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(314,32) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(323,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(324,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(325,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(326,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(327,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(328,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(329,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(330,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(369,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(370,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(371,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(372,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(373,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(374,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(375,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(376,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(377,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(398,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(398,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(399,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(399,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(400,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(400,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(402,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(402,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(403,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(403,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(404,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(404,11) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(323,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(324,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(325,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(326,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(327,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(328,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(329,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(330,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(370,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(371,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(372,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(373,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(374,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(375,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(376,9) ]
   remark #15388: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(377,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.322
   remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(260,16) ]
   remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(259,20) ]
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 35 
   remark #15451: unmasked unaligned unit stride stores: 22 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 308 
   remark #15477: vector cost: 81.870 
   remark #15478: estimated potential speedup: 3.360 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(292,5)
<Remainder loop for vectorization, Predicate Optimized v2>
LOOP END

LOOP BEGIN at d2q9-bgk.c(289,3)
   remark #25261: Invariant Condition eliminated(Proven True) at line 301
   remark #25260: Invariant Condition eliminated(Proven False) at line 300
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(292,5)
   <Peeled loop for vectorization, Predicate Optimized v1>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(292,5)
   <Predicate Optimized v1>
      remark #25422: Invariant Condition at line 298 hoisted out of this loop
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(306,32) ]
      remark #15389: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(307,32) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(308,32) ]
      remark #15389: vectorization support: reference cells->speeds3[x_e+jj*params.nx] has unaligned access   [ d2q9-bgk.c(309,32) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(310,32) ]
      remark #15389: vectorization support: reference cells->speeds5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(311,32) ]
      remark #15389: vectorization support: reference cells->speeds6[x_e+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(312,32) ]
      remark #15389: vectorization support: reference cells->speeds7[x_e+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(313,32) ]
      remark #15389: vectorization support: reference cells->speeds8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(314,32) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(323,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(324,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(325,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(326,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(327,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(328,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(329,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(330,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(369,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(370,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(371,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(372,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(373,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(374,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(375,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(376,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(377,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(398,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(398,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(399,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(399,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(400,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(400,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(402,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(402,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(403,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(403,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(404,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(404,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(323,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(324,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(325,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(326,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(327,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(328,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(329,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(330,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(370,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(371,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(372,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(373,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(374,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(375,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(376,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(377,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.338
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(260,16) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(259,20) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 35 
      remark #15451: unmasked unaligned unit stride stores: 22 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 309 
      remark #15477: vector cost: 82.000 
      remark #15478: estimated potential speedup: 3.360 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(292,5)
   <Remainder loop for vectorization, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(292,5)
   <Peeled loop for vectorization, Predicate Optimized v2>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(292,5)
   <Predicate Optimized v2>
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(306,32) ]
      remark #15389: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(307,32) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(308,32) ]
      remark #15389: vectorization support: reference cells->speeds3[x_e+jj*params.nx] has unaligned access   [ d2q9-bgk.c(309,32) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(310,32) ]
      remark #15389: vectorization support: reference cells->speeds5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(311,32) ]
      remark #15389: vectorization support: reference cells->speeds6[x_e+y_s*params.nx] has unaligned access   [ d2q9-bgk.c(312,32) ]
      remark #15389: vectorization support: reference cells->speeds7[x_e+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(313,32) ]
      remark #15389: vectorization support: reference cells->speeds8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk.c(314,32) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(323,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(324,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(325,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(326,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(327,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(328,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(329,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(330,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(369,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(370,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(371,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(372,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(373,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(374,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(375,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(376,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(377,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(398,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(398,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(399,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(399,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(400,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(400,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(402,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(402,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(403,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(403,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(404,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(404,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(323,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(324,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(325,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(326,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(327,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(328,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(329,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(330,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(370,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(371,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(372,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(373,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(374,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(375,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(376,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(377,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.337
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(260,16) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(259,20) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 35 
      remark #15451: unmasked unaligned unit stride stores: 22 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 308 
      remark #15477: vector cost: 81.870 
      remark #15478: estimated potential speedup: 3.360 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(292,5)
   <Remainder loop for vectorization, Predicate Optimized v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(256,32):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:256

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    2217
            Global    :     442
            Local     :    1775
        Regenerable   :      76
        Spilled       :     271
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    3176 bytes*
            Reads     :     771 [1.88e+01 ~ 18.8%]
            Writes    :     354 [5.07e+00 ~ 5.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, const float, const float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, const float, const float)) [3/13=23.1%] d2q9-bgk.c(414,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(434,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk.c(434,3)
   remark #15388: vectorization support: reference cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(444,7) ]
   remark #15388: vectorization support: reference cells->speeds1[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(444,7) ]
   remark #15388: vectorization support: reference cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(445,7) ]
   remark #15388: vectorization support: reference cells->speeds5[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(445,7) ]
   remark #15388: vectorization support: reference cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(446,7) ]
   remark #15388: vectorization support: reference cells->speeds8[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(446,7) ]
   remark #15388: vectorization support: reference cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(448,7) ]
   remark #15388: vectorization support: reference cells->speeds3[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(448,7) ]
   remark #15388: vectorization support: reference cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(449,7) ]
   remark #15388: vectorization support: reference cells->speeds6[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(449,7) ]
   remark #15388: vectorization support: reference cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(450,7) ]
   remark #15388: vectorization support: reference cells->speeds7[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(450,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.253
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15454: masked aligned unit stride loads: 9 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.020 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(434,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(414,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:414

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     139
            Global    :      57
            Local     :      82
        Regenerable   :       8
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      19 [4.31e+00 ~ 4.3%]
            Writes    :      19 [3.56e+00 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed *__restrict__, int *__restrict__)) [4/13=30.8%] d2q9-bgk.c(458,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(478,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(481,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(481,5)
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(487,37) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(488,39) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(489,39) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(490,39) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(491,39) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(492,39) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(493,39) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(494,39) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(495,39) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(501,28) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(502,25) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(503,25) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(504,26) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(505,28) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(506,28) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(509,28) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(510,25) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(511,25) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(512,26) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(513,28) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(514,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.420
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(460,15) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(459,19) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 91 
      remark #15477: vector cost: 19.620 
      remark #15478: estimated potential speedup: 4.000 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(481,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(458,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:458

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     219
            Global    :      68
            Local     :     151
        Regenerable   :       9
        Spilled       :      26
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     160 bytes*
            Reads     :      51 [7.75e+00 ~ 7.7%]
            Writes    :      29 [2.91e+00 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: get_rows_for_rank(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_rows_for_rank(int, int, int)) [5/13=38.5%] d2q9-bgk.c(528,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(528,1):remark #34051: REGISTER ALLOCATION : [get_rows_for_rank] d2q9-bgk.c:528

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :       0
            Local     :      21
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: get_start_row(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_start_row(int, int, int)) [6/13=46.2%] d2q9-bgk.c(536,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(536,1):remark #34051: REGISTER ALLOCATION : [get_start_row] d2q9-bgk.c:536

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      22
            Global    :       0
            Local     :      22
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, t_speed *, t_speed *, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, t_speed *, t_speed *, int **, float **)) [7/13=53.8%] d2q9-bgk.c(745,1)
  -> EXTERN: (749,3) _mm_free(void *)
  -> EXTERN: (750,3) _mm_free(void *)
  -> EXTERN: (751,3) _mm_free(void *)
  -> EXTERN: (752,3) _mm_free(void *)
  -> EXTERN: (753,3) _mm_free(void *)
  -> EXTERN: (754,3) _mm_free(void *)
  -> EXTERN: (755,3) _mm_free(void *)
  -> EXTERN: (756,3) _mm_free(void *)
  -> EXTERN: (757,3) _mm_free(void *)
  -> EXTERN: (759,3) _mm_free(void *)
  -> EXTERN: (760,3) _mm_free(void *)
  -> EXTERN: (761,3) _mm_free(void *)
  -> EXTERN: (762,3) _mm_free(void *)
  -> EXTERN: (763,3) _mm_free(void *)
  -> EXTERN: (764,3) _mm_free(void *)
  -> EXTERN: (765,3) _mm_free(void *)
  -> EXTERN: (766,3) _mm_free(void *)
  -> EXTERN: (767,3) _mm_free(void *)
  -> EXTERN: (769,3) _mm_free(void *)
  -> EXTERN: (772,3) free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(745,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:745

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8 r12-r13]
        
    Routine temporaries
        Total         :      56
            Global    :      10
            Local     :      46
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)) [8/13=61.5%] d2q9-bgk.c(780,1)
  -> INLINE: (783,10) av_velocity(const t_param, t_speed *__restrict__, int *__restrict__) (isz = 260) (sz = 271)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(478,3) inlined into d2q9-bgk.c(783,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(481,5) inlined into d2q9-bgk.c(783,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(481,5) inlined into d2q9-bgk.c(783,10)
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(487,37) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(488,39) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(489,39) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(490,39) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(491,39) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(492,39) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(493,39) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(494,39) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(495,39) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(501,28) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(502,25) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(503,25) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(504,26) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(505,28) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(506,28) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(509,28) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(510,25) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(511,25) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(512,26) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(513,28) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(514,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.420
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(460,15) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(459,19) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 91 
      remark #15477: vector cost: 19.620 
      remark #15478: estimated potential speedup: 4.000 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(481,5) inlined into d2q9-bgk.c(783,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(780,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:780

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     226
            Global    :      69
            Local     :     157
        Regenerable   :      12
        Spilled       :      27
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     168 bytes*
            Reads     :      52 [7.75e+00 ~ 7.7%]
            Writes    :      30 [2.96e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed *)) [9/13=69.2%] d2q9-bgk.c(787,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(790,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(792,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(792,5)
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(794,16) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(795,16) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(796,16) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(797,16) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(798,16) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(799,16) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(800,16) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(801,16) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(802,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(788,15) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(792,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(794,16) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(795,16) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(796,16) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(797,16) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(798,16) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(799,16) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(800,16) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(801,16) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(802,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(788,15) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(792,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(787,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:787

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     171
            Global    :      63
            Local     :     108
        Regenerable   :       5
        Spilled       :      40
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     312 bytes*
            Reads     :      65 [8.54e+00 ~ 8.5%]
            Writes    :      66 [7.59e+00 ~ 7.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed *, int *, float *)) [10/13=76.9%] d2q9-bgk.c(810,1)
  -> EXTERN: (819,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (823,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (874,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (878,3) fclose(FILE *)
  -> EXTERN: (880,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (884,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (889,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (892,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(826,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(874,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (849:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (874:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (874:7) and cells->speeds1 (849:9)

   LOOP BEGIN at d2q9-bgk.c(828,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(874,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (849:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (874:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (874:7) and cells->speeds1 (849:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(887,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(889,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(810,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:810

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     151
            Global    :      35
            Local     :     116
        Regenerable   :      44
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [3.89e+00 ~ 3.9%]
            Writes    :       6 [1.19e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [11/13=84.6%] d2q9-bgk.c(898,1)
  -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (901,3) fflush(FILE *)
  -> EXTERN: (902,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(898,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:898

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [12/13=92.3%] d2q9-bgk.c(906,1)
  -> EXTERN: (907,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (908,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(906,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:906

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed *, t_speed *, int **, float **, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_speed *, t_speed *, int **, float **, int, int)) [13/13=100.0%] d2q9-bgk.c(548,1)
  -> EXTERN: (556,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (560,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (561,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (565,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (567,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (569,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (571,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (573,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (575,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (577,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (579,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (581,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (583,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (585,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (587,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (589,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (591,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (594,3) fclose(FILE *)
  -> INLINE: (597,20) get_rows_for_rank(int, int, int) (isz = 4) (sz = 15)
  -> EXTERN: (620,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (621,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (622,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (623,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (624,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (625,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (626,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (627,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (628,32) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (630,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (631,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (632,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (633,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (634,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (635,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (636,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (637,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (638,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (641,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (642,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (643,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (644,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (645,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (646,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (647,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (648,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (649,36) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (651,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (652,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (653,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (654,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (655,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (656,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (657,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (658,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (659,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (662,20) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (664,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (700,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (704,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (705,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (708,19) get_start_row(int, int, int) (isz = 6) (sz = 17)
  -> EXTERN: (709,3) printf(const char *__restrict__, ...)
  -> EXTERN: (710,3) printf(const char *__restrict__, ...)
  -> EXTERN: (713,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (713,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (716,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (718,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (720,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> INLINE: (722,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (899,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (900,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (901,3) fflush(FILE *)
    -> EXTERN: (902,3) exit(int)
  -> EXTERN: (732,3) fclose(FILE *)
  -> EXTERN: (738,26) malloc(size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(671,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds0[ii+jj*params->nx] (676:7) and cells_ptr->speeds8[ii+jj*params->nx] (686:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds8[ii+jj*params->nx] (686:7) and cells_ptr->speeds0[ii+jj*params->nx] (676:7)

   LOOP BEGIN at d2q9-bgk.c(673,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds0[ii+jj*params->nx] (676:7) and cells_ptr->speeds8[ii+jj*params->nx] (686:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds8[ii+jj*params->nx] (686:7) and cells_ptr->speeds0[ii+jj*params->nx] (676:7)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(691,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between obstacles_ptr (695:9) and obstacles_ptr (695:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between obstacles_ptr (695:9) and obstacles_ptr (695:9)

   LOOP BEGIN at d2q9-bgk.c(693,5)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(713,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(548,1):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:548

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     932
            Global    :     114
            Local     :     818
        Regenerable   :     457
        Spilled       :      12
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [1.32e+00 ~ 1.3%]
            Writes    :       1 [1.36e-01 ~ 0.1%]
        Spills        :      48 bytes*
            Reads     :       7 [4.48e-01 ~ 0.4%]
            Writes    :       6 [4.45e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

