Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -I/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/include -std=c99 -Wall -O3 -xAVX2 -g -qopt-report=5 -simd -lm -o d2q9-bgk -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib/release -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib -Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib/release -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2020_u4/compilers_and_libraries_2020.4.304/linux/mpi/intel64/lib -lmpifort -lmpi -ldl -lrt -lpthread

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/20=5.0%] d2q9-bgk.c(325,1)
  -> INLINE: (346,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (1245,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1246,3) exit(int)
  -> EXTERN: (355,3) MPI_Init(int *, char ***)
  -> EXTERN: (356,3) MPI_Comm_size(MPI_Comm, int *)
  -> EXTERN: (357,3) MPI_Comm_rank(MPI_Comm, int *)
  -> EXTERN: (366,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (370,3) initialise(const char *, const char *, t_param *, t_mpi *, t_speed *, t_speed *, t_speed *, int **, int **, float **) (isz = 1724) (sz = 1749)
     [[ Inlining would exceed -inline-max-size value (1749>230) <1>]]
  -> INLINE: (382,31) get_tot_cells(const t_param, const t_mpi, const int *__restrict__) (isz = 32) (sz = 43)
  -> EXTERN: (385,3) MPI_Reduce(const void *, void *, int, MPI_Datatype, MPI_Op, int, MPI_Comm)
  -> EXTERN: (389,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (394,3) accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, const float, const float, const t_mpi) (isz = 206) (sz = 224)
  -> EXTERN: (401,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (403,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (405,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (410,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (412,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (414,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> INLINE: (420,21) timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float, const t_mpi) (isz = 739) (sz = 766)
    -> EXTERN: (656,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
    -> EXTERN: (658,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
    -> EXTERN: (660,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
    -> EXTERN: (665,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
    -> EXTERN: (667,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
    -> EXTERN: (669,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (423,5) MPI_Reduce(const void *, void *, int, MPI_Datatype, MPI_Op, int, MPI_Comm)
  -> EXTERN: (444,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (449,7) _vla_alloc(long)
  -> EXTERN: (450,7) _vla_alloc(long)
  -> INLINE: (452,24) get_rows_for_rank(int, int, int) (isz = 4) (sz = 15)
  -> INLINE: (453,20) get_start_row(int, int, int) (isz = 6) (sz = 17)
  -> EXTERN: (456,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (457,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (458,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (459,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (460,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (461,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (462,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (463,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (464,3) MPI_Gatherv(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (467,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (473,5) printf(const char *__restrict__, ...)
  -> EXTERN: (474,5) printf(const char *__restrict__, ...)
  -> INLINE: (474,43) calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__) (isz = 268) (sz = 279)
    -> INLINE: (1121,10) av_velocity(const t_param, t_speed *__restrict__, int *__restrict__) (isz = 260) (sz = 271)
  -> EXTERN: (475,5) printf(const char *__restrict__, ...)
  -> EXTERN: (476,5) printf(const char *__restrict__, ...)
  -> EXTERN: (477,5) printf(const char *__restrict__, ...)
  -> EXTERN: (478,5) printf(const char *__restrict__, ...)
  -> INLINE: (479,5) write_values(const t_param, t_speed *, int *, float *) (isz = 312) (sz = 325)
    -> EXTERN: (1157,8) fopen(const char *__restrict__, const char *__restrict__)
    -> INLINE: (1161,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1239,3) fflush(FILE *)
      -> EXTERN: (1240,3) exit(int)
    -> EXTERN: (1212,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1216,3) fclose(FILE *)
    -> EXTERN: (1218,8) fopen(const char *__restrict__, const char *__restrict__)
    -> INLINE: (1222,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
      -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
      -> EXTERN: (1239,3) fflush(FILE *)
      -> EXTERN: (1240,3) exit(int)
    -> EXTERN: (1227,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1230,3) fclose(FILE *)
  -> INLINE: (482,3) finalise(const t_param *, const t_mpi *, t_speed *, t_speed *, t_speed *, int **, int **, float **) (isz = 93) (sz = 114)
    -> EXTERN: (1070,3) _mm_free(void *)
    -> EXTERN: (1071,3) _mm_free(void *)
    -> EXTERN: (1072,3) _mm_free(void *)
    -> EXTERN: (1073,3) _mm_free(void *)
    -> EXTERN: (1074,3) _mm_free(void *)
    -> EXTERN: (1075,3) _mm_free(void *)
    -> EXTERN: (1076,3) _mm_free(void *)
    -> EXTERN: (1077,3) _mm_free(void *)
    -> EXTERN: (1078,3) _mm_free(void *)
    -> EXTERN: (1080,3) _mm_free(void *)
    -> EXTERN: (1081,3) _mm_free(void *)
    -> EXTERN: (1082,3) _mm_free(void *)
    -> EXTERN: (1083,3) _mm_free(void *)
    -> EXTERN: (1084,3) _mm_free(void *)
    -> EXTERN: (1085,3) _mm_free(void *)
    -> EXTERN: (1086,3) _mm_free(void *)
    -> EXTERN: (1087,3) _mm_free(void *)
    -> EXTERN: (1088,3) _mm_free(void *)
    -> EXTERN: (1091,5) _mm_free(void *)
    -> EXTERN: (1092,5) _mm_free(void *)
    -> EXTERN: (1093,5) _mm_free(void *)
    -> EXTERN: (1094,5) _mm_free(void *)
    -> EXTERN: (1095,5) _mm_free(void *)
    -> EXTERN: (1096,5) _mm_free(void *)
    -> EXTERN: (1097,5) _mm_free(void *)
    -> EXTERN: (1098,5) _mm_free(void *)
    -> EXTERN: (1099,5) _mm_free(void *)
    -> EXTERN: (1102,3) _mm_free(void *)
    -> EXTERN: (1106,5) _mm_free(void *)
    -> EXTERN: (1110,3) free(void *)
  -> EXTERN: (483,3) _vla_free(void *, long)
  -> EXTERN: (483,3) _vla_free(void *, long)
  -> EXTERN: (483,3) MPI_Finalize(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(813,3) inlined into d2q9-bgk.c(382,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(814,5) inlined into d2q9-bgk.c(382,31)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(814,5) inlined into d2q9-bgk.c(382,31)
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(812,17) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(814,5) inlined into d2q9-bgk.c(382,31)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.455
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(812,17) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(814,5) inlined into d2q9-bgk.c(382,31)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(701,3) inlined into d2q9-bgk.c(394,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk.c(701,3) inlined into d2q9-bgk.c(394,3)
   remark #15388: vectorization support: reference cells.speeds1[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(711,7) ]
   remark #15388: vectorization support: reference cells.speeds1[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(711,7) ]
   remark #15388: vectorization support: reference cells.speeds5[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(712,7) ]
   remark #15388: vectorization support: reference cells.speeds5[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(712,7) ]
   remark #15388: vectorization support: reference cells.speeds8[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(713,7) ]
   remark #15388: vectorization support: reference cells.speeds8[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(713,7) ]
   remark #15388: vectorization support: reference cells.speeds3[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(715,7) ]
   remark #15388: vectorization support: reference cells.speeds3[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(715,7) ]
   remark #15388: vectorization support: reference cells.speeds6[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(716,7) ]
   remark #15388: vectorization support: reference cells.speeds6[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(716,7) ]
   remark #15388: vectorization support: reference cells.speeds7[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(717,7) ]
   remark #15388: vectorization support: reference cells.speeds7[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(717,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.253
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15454: masked aligned unit stride loads: 9 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.020 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(701,3) inlined into d2q9-bgk.c(394,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(417,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(530,3) inlined into d2q9-bgk.c(420,21)
      remark #25261: Invariant Condition eliminated(Proven True) at line 542
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk.c(533,5) inlined into d2q9-bgk.c(420,21)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=7
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(533,5) inlined into d2q9-bgk.c(420,21)
         remark #25259: Invariant Condition eliminated(Loop at level 3 peeled last iter) at line 540
         remark #25261: Invariant Condition eliminated(Proven True) at line 540
         remark #25258: Invariant Condition eliminated(Loop at level 3 peeled) at line 542 
         remark #25260: Invariant Condition eliminated(Proven False) at line 542
         remark #15389: vectorization support: reference cells.speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(547,32) ]
         remark #15389: vectorization support: reference cells.speeds1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(548,32) ]
         remark #15389: vectorization support: reference cells.speeds2[ii+(jj-1)*params.nx] has unaligned access   [ d2q9-bgk.c(549,32) ]
         remark #15389: vectorization support: reference cells.speeds3[x_e+jj*params.nx] has unaligned access   [ d2q9-bgk.c(550,32) ]
         remark #15389: vectorization support: reference cells.speeds4[ii+(jj+1)*params.nx] has unaligned access   [ d2q9-bgk.c(551,32) ]
         remark #15389: vectorization support: reference cells.speeds5[x_w+(jj-1)*params.nx] has unaligned access   [ d2q9-bgk.c(552,32) ]
         remark #15389: vectorization support: reference cells.speeds6[x_e+(jj-1)*params.nx] has unaligned access   [ d2q9-bgk.c(553,32) ]
         remark #15389: vectorization support: reference cells.speeds7[x_e+(jj+1)*params.nx] has unaligned access   [ d2q9-bgk.c(554,32) ]
         remark #15389: vectorization support: reference cells.speeds8[x_w+(jj+1)*params.nx] has unaligned access   [ d2q9-bgk.c(555,32) ]
         remark #15389: vectorization support: reference tmp_cells.speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(564,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(565,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(566,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(567,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(568,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(569,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(570,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(571,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(610,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(611,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(612,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(613,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(614,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(615,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(616,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(617,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(618,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(639,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(639,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(640,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(640,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(641,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(641,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(643,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(643,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(644,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(644,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(645,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(645,11) ]
         remark #15389: vectorization support: reference tmp_cells.speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(564,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(565,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(566,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(567,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(568,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(569,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(570,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(571,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(611,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(612,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(613,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(614,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(615,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(616,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(617,9) ]
         remark #15389: vectorization support: reference tmp_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(618,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.289
         remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(501,16) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 35 
         remark #15451: unmasked unaligned unit stride stores: 22 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 303 
         remark #15477: vector cost: 80.500 
         remark #15478: estimated potential speedup: 3.360 
         remark #15486: divides: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at d2q9-bgk.c(533,5) inlined into d2q9-bgk.c(420,21)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(451,3)
   remark #25427: Loop Statements Reordered
   remark #15388: vectorization support: reference displs[rank] has aligned access   [ d2q9-bgk.c(453,5) ]
   remark #15388: vectorization support: reference recvcounts[rank] has aligned access   [ d2q9-bgk.c(452,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 106 
   remark #15477: vector cost: 3.750 
   remark #15478: estimated potential speedup: 20.640 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(451,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(745,3) inlined into d2q9-bgk.c(474,43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(748,5) inlined into d2q9-bgk.c(474,43)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(748,5) inlined into d2q9-bgk.c(474,43)
      remark #15389: vectorization support: reference all_cells.speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(754,37) ]
      remark #15389: vectorization support: reference all_cells.speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(755,39) ]
      remark #15389: vectorization support: reference all_cells.speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(756,39) ]
      remark #15389: vectorization support: reference all_cells.speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(757,39) ]
      remark #15389: vectorization support: reference all_cells.speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(758,39) ]
      remark #15389: vectorization support: reference all_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(759,39) ]
      remark #15389: vectorization support: reference all_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(760,39) ]
      remark #15389: vectorization support: reference all_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(761,39) ]
      remark #15389: vectorization support: reference all_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(762,39) ]
      remark #15389: vectorization support: reference all_cells.speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(768,28) ]
      remark #15389: vectorization support: reference all_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(769,25) ]
      remark #15389: vectorization support: reference all_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(770,25) ]
      remark #15389: vectorization support: reference all_cells.speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(771,26) ]
      remark #15389: vectorization support: reference all_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(772,28) ]
      remark #15389: vectorization support: reference all_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(773,28) ]
      remark #15389: vectorization support: reference all_cells.speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(776,28) ]
      remark #15389: vectorization support: reference all_cells.speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(777,25) ]
      remark #15389: vectorization support: reference all_cells.speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(778,25) ]
      remark #15389: vectorization support: reference all_cells.speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(779,26) ]
      remark #15389: vectorization support: reference all_cells.speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(780,28) ]
      remark #15389: vectorization support: reference all_cells.speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(781,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.420
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(727,15) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(726,19) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 91 
      remark #15477: vector cost: 19.620 
      remark #15478: estimated potential speedup: 4.000 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(748,5) inlined into d2q9-bgk.c(474,43)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1164,3) inlined into d2q9-bgk.c(479,5)
   remark #15523: loop was not vectorized: loop control variable jj was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(1166,5) inlined into d2q9-bgk.c(479,5)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1225,3) inlined into d2q9-bgk.c(479,5)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1227,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(382,31):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(382,31):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
d2q9-bgk.c(394,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(394,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
d2q9-bgk.c(420,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(420,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
d2q9-bgk.c(474,43):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(479,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(325,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:325

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1816
            Global    :     438
            Local     :    1378
        Regenerable   :     185
        Spilled       :     222
        
    Routine stack
        Variables     :     504 bytes*
            Reads     :     243 [1.27e+00 ~ 1.3%]
            Writes    :      44 [3.73e-01 ~ 0.4%]
        Spills        :    1928 bytes*
            Reads     :     458 [1.74e+01 ~ 17.4%]
            Writes    :     300 [5.28e+00 ~ 5.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: get_speed(const int, const t_speed *__restrict__, const int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_speed(const int, const t_speed *__restrict__, const int)) [2/20=10.0%] d2q9-bgk.c(203,78)
  -> EXTERN: (224,7) printf(const char *__restrict__, ...)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(203,78):remark #34051: REGISTER ALLOCATION : [get_speed] d2q9-bgk.c:203

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rdx rsi rdi zmm0]
        
    Routine temporaries
        Total         :      53
            Global    :       9
            Local     :      44
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_grid(const t_param, const t_mpi, const t_speed *__restrict__, const char *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_grid(const t_param, const t_mpi, const t_speed *__restrict__, const char *, int)) [3/20=15.0%] d2q9-bgk.c(229,123)
  -> EXTERN: (230,3) printf(const char *__restrict__, ...)
  -> EXTERN: (235,12) malloc(size_t)
  -> EXTERN: (239,16) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (242,18) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (242,45) get_speed(const int, const t_speed *__restrict__, const int) (isz = 101) (sz = 121)
    -> EXTERN: (224,7) printf(const char *__restrict__, ...)
  -> EXTERN: (244,16) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (247,3) printf(const char *__restrict__, ...)
  -> EXTERN: (249,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at d2q9-bgk.c(238,3)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ d2q9-bgk.c(204,3) ]

   LOOP BEGIN at d2q9-bgk.c(240,5)
      remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ d2q9-bgk.c(204,3) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(229,123):remark #34051: REGISTER ALLOCATION : [print_grid] d2q9-bgk.c:229

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :      86
            Global    :      27
            Local     :      59
        Regenerable   :      21
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [5.33e-01 ~ 0.5%]
            Writes    :       4 [5.33e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_obstacles(const t_param, const t_mpi, const int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_obstacles(const t_param, const t_mpi, const int *__restrict__)) [4/20=20.0%] d2q9-bgk.c(252,99)
  -> EXTERN: (256,12) malloc(size_t)
  -> EXTERN: (260,16) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (263,18) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (265,16) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (268,3) printf(const char *__restrict__, ...)
  -> EXTERN: (270,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(259,3)
   remark #15382: vectorization support: call to function sprintf(char *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(260,16) ]
   remark #15382: vectorization support: call to function sprintf(char *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(263,18) ]
   remark #15382: vectorization support: call to function sprintf(char *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(265,16) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:sprintf(char *__restrict__, const char *__restrict__, ...) (260:16) and call:sprintf(char *__restrict__, const char *__restrict__, ...) (265:16)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:sprintf(char *__restrict__, const char *__restrict__, ...) (265:16) and call:sprintf(char *__restrict__, const char *__restrict__, ...) (260:16)

   LOOP BEGIN at d2q9-bgk.c(261,5)
      remark #15382: vectorization support: call to function sprintf(char *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(263,18) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between current (263:18) and current (263:7)
      remark #15346: vector dependence: assumed FLOW dependence between current (263:7) and current (263:18)
      remark #15346: vector dependence: assumed ANTI dependence between current (263:18) and current (263:7)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(252,99):remark #34051: REGISTER ALLOCATION : [print_obstacles] d2q9-bgk.c:252

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15]
        
    Routine temporaries
        Total         :      59
            Global    :      28
            Local     :      31
        Regenerable   :      17
        Spilled       :      10
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       8 [3.78e+00 ~ 3.8%]
            Writes    :       8 [3.02e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_speeds(const t_param, const t_mpi, const t_speed *, const t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_speeds(const t_param, const t_mpi, const t_speed *, const t_speed *)) [5/20=25.0%] d2q9-bgk.c(273,113)
  -> (274,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (275,3) printf(const char *__restrict__, ...)
  -> (276,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (277,3) printf(const char *__restrict__, ...)
  -> (279,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (280,3) printf(const char *__restrict__, ...)
  -> (281,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (282,3) printf(const char *__restrict__, ...)
  -> (284,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (285,3) printf(const char *__restrict__, ...)
  -> (286,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (287,3) printf(const char *__restrict__, ...)
  -> INLINE: (289,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (290,3) printf(const char *__restrict__, ...)
  -> INLINE: (291,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (292,3) printf(const char *__restrict__, ...)
  -> INLINE: (294,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (295,3) printf(const char *__restrict__, ...)
  -> INLINE: (296,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (297,3) printf(const char *__restrict__, ...)
  -> INLINE: (299,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (300,3) printf(const char *__restrict__, ...)
  -> INLINE: (301,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (302,3) printf(const char *__restrict__, ...)
  -> INLINE: (304,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (305,3) printf(const char *__restrict__, ...)
  -> INLINE: (306,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (307,3) printf(const char *__restrict__, ...)
  -> INLINE: (309,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (310,3) printf(const char *__restrict__, ...)
  -> INLINE: (311,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (312,3) printf(const char *__restrict__, ...)
  -> INLINE: (314,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (315,3) printf(const char *__restrict__, ...)
  -> INLINE: (316,3) print_cells(const t_param, const t_mpi, const t_speed *, const char *, int) (isz = 405) (sz = 418)
    -> EXTERN: (187,3) printf(const char *__restrict__, ...)
    -> EXTERN: (190,5) printf(const char *__restrict__, ...)
    -> EXTERN: (191,50) printf(const char *__restrict__, ...)
    -> EXTERN: (191,64) printf(const char *__restrict__, ...)
    -> (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (195,5) printf(const char *__restrict__, ...)
    -> (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
       [[ Inlining inhibited by overrideable criterion  <2>]]
    -> EXTERN: (199,50) printf(const char *__restrict__, ...)
    -> EXTERN: (199,66) printf(const char *__restrict__, ...)
  -> EXTERN: (317,3) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(289,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(289,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(289,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(291,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(291,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(291,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(294,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(294,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(294,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(296,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(296,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(296,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(299,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(299,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(299,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(301,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(301,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(301,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(304,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(304,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(304,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(306,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(306,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(306,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(309,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(309,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(309,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(311,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(311,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(311,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(314,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(314,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(314,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(189,3) inlined into d2q9-bgk.c(316,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(190,5) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,64) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(191,50) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(195,5) ]
   remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(197,7) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,66) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(199,50) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at d2q9-bgk.c(192,5) inlined into d2q9-bgk.c(316,3)
      remark #15382: vectorization support: call to function print_cell(int, int, const t_speed *) cannot be vectorized   [ d2q9-bgk.c(193,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5) inlined into d2q9-bgk.c(316,3)
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(274,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(274,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(274,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(274,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(276,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(276,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(276,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(276,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(279,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(279,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(279,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(279,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(281,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(281,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(281,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(281,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(284,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(284,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(284,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(284,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(286,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(286,3):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
d2q9-bgk.c(286,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
d2q9-bgk.c(286,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(273,113):remark #34051: REGISTER ALLOCATION : [print_speeds] d2q9-bgk.c:273

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbp rsi rdi r8-r9 r12-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :     533
            Global    :      93
            Local     :     440
        Regenerable   :     325
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_cell(int, int, const t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_cell(int, int, const t_speed *)) [6/20=30.0%] d2q9-bgk.c(152,57)
  -> EXTERN: (155,7) printf(const char *__restrict__, ...)
  -> EXTERN: (158,7) printf(const char *__restrict__, ...)
  -> EXTERN: (161,7) printf(const char *__restrict__, ...)
  -> EXTERN: (164,7) printf(const char *__restrict__, ...)
  -> EXTERN: (167,7) printf(const char *__restrict__, ...)
  -> EXTERN: (170,7) printf(const char *__restrict__, ...)
  -> EXTERN: (173,7) printf(const char *__restrict__, ...)
  -> EXTERN: (176,7) printf(const char *__restrict__, ...)
  -> EXTERN: (179,7) printf(const char *__restrict__, ...)
  -> EXTERN: (182,7) printf(const char *__restrict__, ...)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(152,57):remark #34051: REGISTER ALLOCATION : [print_cell] d2q9-bgk.c:152

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rsi rdi zmm0]
        
    Routine temporaries
        Total         :      78
            Global    :       9
            Local     :      69
        Regenerable   :      29
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: print_cells(const t_param, const t_mpi, const t_speed *, const char *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (print_cells(const t_param, const t_mpi, const t_speed *, const char *, int)) [7/20=35.0%] d2q9-bgk.c(186,115)
  -> EXTERN: (187,3) printf(const char *__restrict__, ...)
  -> EXTERN: (190,5) printf(const char *__restrict__, ...)
  -> EXTERN: (191,50) printf(const char *__restrict__, ...)
  -> EXTERN: (191,64) printf(const char *__restrict__, ...)
  -> INLINE: (193,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
    -> EXTERN: (155,7) printf(const char *__restrict__, ...)
    -> EXTERN: (158,7) printf(const char *__restrict__, ...)
    -> EXTERN: (161,7) printf(const char *__restrict__, ...)
    -> EXTERN: (164,7) printf(const char *__restrict__, ...)
    -> EXTERN: (167,7) printf(const char *__restrict__, ...)
    -> EXTERN: (170,7) printf(const char *__restrict__, ...)
    -> EXTERN: (173,7) printf(const char *__restrict__, ...)
    -> EXTERN: (176,7) printf(const char *__restrict__, ...)
    -> EXTERN: (179,7) printf(const char *__restrict__, ...)
    -> EXTERN: (182,7) printf(const char *__restrict__, ...)
  -> EXTERN: (195,5) printf(const char *__restrict__, ...)
  -> INLINE: (197,7) print_cell(int, int, const t_speed *) (isz = 157) (sz = 166)
    -> EXTERN: (155,7) printf(const char *__restrict__, ...)
    -> EXTERN: (158,7) printf(const char *__restrict__, ...)
    -> EXTERN: (161,7) printf(const char *__restrict__, ...)
    -> EXTERN: (164,7) printf(const char *__restrict__, ...)
    -> EXTERN: (167,7) printf(const char *__restrict__, ...)
    -> EXTERN: (170,7) printf(const char *__restrict__, ...)
    -> EXTERN: (173,7) printf(const char *__restrict__, ...)
    -> EXTERN: (176,7) printf(const char *__restrict__, ...)
    -> EXTERN: (179,7) printf(const char *__restrict__, ...)
    -> EXTERN: (182,7) printf(const char *__restrict__, ...)
  -> EXTERN: (199,50) printf(const char *__restrict__, ...)
  -> EXTERN: (199,66) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at d2q9-bgk.c(189,3)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ d2q9-bgk.c(153,3) ]

   LOOP BEGIN at d2q9-bgk.c(192,5)
      remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ d2q9-bgk.c(153,3) ]
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(196,5)
      remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ d2q9-bgk.c(153,3) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(186,115):remark #34051: REGISTER ALLOCATION : [print_cells] d2q9-bgk.c:186

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r12-r15 zmm0]
        
    Routine temporaries
        Total         :     175
            Global    :      17
            Local     :     158
        Regenerable   :      77
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [2.32e-01 ~ 0.2%]
            Writes    :       2 [2.32e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float, const t_mpi)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float, const t_mpi)) [8/20=40.0%] d2q9-bgk.c(498,40)
  -> EXTERN: (656,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (658,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (660,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (665,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (667,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)
  -> EXTERN: (669,3) MPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(530,3)
   remark #25261: Invariant Condition eliminated(Proven True) at line 542
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(533,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(533,5)
      remark #25259: Invariant Condition eliminated(Loop at level 2 peeled last iter) at line 540
      remark #25261: Invariant Condition eliminated(Proven True) at line 540
      remark #25258: Invariant Condition eliminated(Loop at level 2 peeled) at line 542 
      remark #25260: Invariant Condition eliminated(Proven False) at line 542
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(547,32) ]
      remark #15389: vectorization support: reference cells->speeds1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk.c(548,32) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+(jj-1)*params.nx] has unaligned access   [ d2q9-bgk.c(549,32) ]
      remark #15389: vectorization support: reference cells->speeds3[x_e+jj*params.nx] has unaligned access   [ d2q9-bgk.c(550,32) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+(jj+1)*params.nx] has unaligned access   [ d2q9-bgk.c(551,32) ]
      remark #15389: vectorization support: reference cells->speeds5[x_w+(jj-1)*params.nx] has unaligned access   [ d2q9-bgk.c(552,32) ]
      remark #15389: vectorization support: reference cells->speeds6[x_e+(jj-1)*params.nx] has unaligned access   [ d2q9-bgk.c(553,32) ]
      remark #15389: vectorization support: reference cells->speeds7[x_e+(jj+1)*params.nx] has unaligned access   [ d2q9-bgk.c(554,32) ]
      remark #15389: vectorization support: reference cells->speeds8[x_w+(jj+1)*params.nx] has unaligned access   [ d2q9-bgk.c(555,32) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(564,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(565,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(566,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(567,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(568,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(569,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(570,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(571,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(610,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(611,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(612,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(613,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(614,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(615,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(616,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(617,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(618,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(639,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(639,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(640,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(640,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(641,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(641,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(643,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(643,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(644,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(644,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(645,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(645,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(564,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(565,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(566,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(567,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(568,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(569,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(570,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(571,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(611,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(612,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(613,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(614,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(615,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(616,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(617,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(618,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.303
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(501,16) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 35 
      remark #15451: unmasked unaligned unit stride stores: 22 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 303 
      remark #15477: vector cost: 80.500 
      remark #15478: estimated potential speedup: 3.360 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(533,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(498,40):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:498

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     806
            Global    :     191
            Local     :     615
        Regenerable   :      64
        Spilled       :     136
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    1320 bytes*
            Reads     :     302 [1.90e+01 ~ 19.0%]
            Writes    :     165 [5.96e+00 ~ 6.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, const float, const float, const t_mpi)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, const float, const float, const t_mpi)) [9/20=45.0%] d2q9-bgk.c(676,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(701,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk.c(701,3)
   remark #15388: vectorization support: reference cells->speeds1[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(711,7) ]
   remark #15388: vectorization support: reference cells->speeds1[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(711,7) ]
   remark #15388: vectorization support: reference cells->speeds5[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(712,7) ]
   remark #15388: vectorization support: reference cells->speeds5[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(712,7) ]
   remark #15388: vectorization support: reference cells->speeds8[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(713,7) ]
   remark #15388: vectorization support: reference cells->speeds8[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(713,7) ]
   remark #15388: vectorization support: reference cells->speeds3[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(715,7) ]
   remark #15388: vectorization support: reference cells->speeds3[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(715,7) ]
   remark #15388: vectorization support: reference cells->speeds6[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(716,7) ]
   remark #15388: vectorization support: reference cells->speeds6[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(716,7) ]
   remark #15388: vectorization support: reference cells->speeds7[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(717,7) ]
   remark #15388: vectorization support: reference cells->speeds7[ii+jjj*params.nx] has aligned access   [ d2q9-bgk.c(717,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.253
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15454: masked aligned unit stride loads: 9 
   remark #15455: masked aligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 9.370 
   remark #15478: estimated potential speedup: 2.020 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(701,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(676,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:676

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     145
            Global    :      60
            Local     :      85
        Regenerable   :      11
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      20 [3.37e+00 ~ 3.4%]
            Writes    :      19 [2.78e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed *__restrict__, int *__restrict__)) [10/20=50.0%] d2q9-bgk.c(725,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(745,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(748,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(748,5)
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(754,37) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(755,39) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(756,39) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(757,39) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(758,39) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(759,39) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(760,39) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(761,39) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(762,39) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(768,28) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(769,25) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(770,25) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(771,26) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(772,28) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(773,28) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(776,28) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(777,25) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(778,25) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(779,26) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(780,28) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(781,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.420
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(727,15) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(726,19) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 91 
      remark #15477: vector cost: 19.620 
      remark #15478: estimated potential speedup: 4.000 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(748,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(725,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:725

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     219
            Global    :      68
            Local     :     151
        Regenerable   :       9
        Spilled       :      26
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     160 bytes*
            Reads     :      51 [7.75e+00 ~ 7.7%]
            Writes    :      29 [2.91e+00 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: get_rows_for_rank(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_rows_for_rank(int, int, int)) [11/20=55.0%] d2q9-bgk.c(795,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(795,1):remark #34051: REGISTER ALLOCATION : [get_rows_for_rank] d2q9-bgk.c:795

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rdx rcx rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :       0
            Local     :      21
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: get_start_row(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_start_row(int, int, int)) [12/20=60.0%] d2q9-bgk.c(803,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(803,1):remark #34051: REGISTER ALLOCATION : [get_start_row] d2q9-bgk.c:803

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      22
            Global    :       0
            Local     :      22
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: get_tot_cells(const t_param, const t_mpi, const int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_tot_cells(const t_param, const t_mpi, const int *__restrict__)) [13/20=65.0%] d2q9-bgk.c(811,96)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(813,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(814,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(814,5)
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(812,17) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(814,5)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.455
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(812,17) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 6.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(814,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(811,96):remark #34051: REGISTER ALLOCATION : [get_tot_cells] d2q9-bgk.c:811

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r12 zmm0-zmm9]
        
    Routine temporaries
        Total         :      62
            Global    :      31
            Local     :      31
        Regenerable   :       5
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, const t_mpi *, t_speed *, t_speed *, t_speed *, int **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, const t_mpi *, t_speed *, t_speed *, t_speed *, int **, int **, float **)) [14/20=70.0%] d2q9-bgk.c(1066,81)
  -> EXTERN: (1070,3) _mm_free(void *)
  -> EXTERN: (1071,3) _mm_free(void *)
  -> EXTERN: (1072,3) _mm_free(void *)
  -> EXTERN: (1073,3) _mm_free(void *)
  -> EXTERN: (1074,3) _mm_free(void *)
  -> EXTERN: (1075,3) _mm_free(void *)
  -> EXTERN: (1076,3) _mm_free(void *)
  -> EXTERN: (1077,3) _mm_free(void *)
  -> EXTERN: (1078,3) _mm_free(void *)
  -> EXTERN: (1080,3) _mm_free(void *)
  -> EXTERN: (1081,3) _mm_free(void *)
  -> EXTERN: (1082,3) _mm_free(void *)
  -> EXTERN: (1083,3) _mm_free(void *)
  -> EXTERN: (1084,3) _mm_free(void *)
  -> EXTERN: (1085,3) _mm_free(void *)
  -> EXTERN: (1086,3) _mm_free(void *)
  -> EXTERN: (1087,3) _mm_free(void *)
  -> EXTERN: (1088,3) _mm_free(void *)
  -> EXTERN: (1091,5) _mm_free(void *)
  -> EXTERN: (1092,5) _mm_free(void *)
  -> EXTERN: (1093,5) _mm_free(void *)
  -> EXTERN: (1094,5) _mm_free(void *)
  -> EXTERN: (1095,5) _mm_free(void *)
  -> EXTERN: (1096,5) _mm_free(void *)
  -> EXTERN: (1097,5) _mm_free(void *)
  -> EXTERN: (1098,5) _mm_free(void *)
  -> EXTERN: (1099,5) _mm_free(void *)
  -> EXTERN: (1102,3) _mm_free(void *)
  -> EXTERN: (1106,5) _mm_free(void *)
  -> EXTERN: (1110,3) free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1066,81):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:1066

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r13 r15]
        
    Routine temporaries
        Total         :      80
            Global    :      13
            Local     :      67
        Regenerable   :       3
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)) [15/20=75.0%] d2q9-bgk.c(1118,1)
  -> INLINE: (1121,10) av_velocity(const t_param, t_speed *__restrict__, int *__restrict__) (isz = 260) (sz = 271)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(745,3) inlined into d2q9-bgk.c(1121,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(748,5) inlined into d2q9-bgk.c(1121,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(748,5) inlined into d2q9-bgk.c(1121,10)
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(754,37) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(755,39) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(756,39) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(757,39) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(758,39) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(759,39) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(760,39) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(761,39) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(762,39) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(768,28) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(769,25) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(770,25) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(771,26) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(772,28) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(773,28) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(776,28) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(777,25) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(778,25) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(779,26) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(780,28) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(781,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.420
      remark #15355: vectorization support: tot_u is float type reduction   [ d2q9-bgk.c(727,15) ]
      remark #15355: vectorization support: tot_cells is int type reduction   [ d2q9-bgk.c(726,19) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 91 
      remark #15477: vector cost: 19.620 
      remark #15478: estimated potential speedup: 4.000 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(748,5) inlined into d2q9-bgk.c(1121,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1118,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:1118

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     226
            Global    :      69
            Local     :     157
        Regenerable   :      12
        Spilled       :      27
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     168 bytes*
            Reads     :      52 [7.75e+00 ~ 7.7%]
            Writes    :      30 [2.96e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, const t_mpi, t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, const t_mpi, t_speed *)) [16/20=80.0%] d2q9-bgk.c(1125,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1128,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(1130,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1130,5)
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1132,16) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1133,16) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1134,16) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1135,16) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1136,16) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1137,16) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1138,16) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1139,16) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1140,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(1126,15) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1130,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1132,16) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1133,16) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1134,16) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1135,16) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1136,16) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1137,16) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1138,16) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1139,16) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(1140,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(1126,15) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(1130,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1125,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:1125

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     171
            Global    :      63
            Local     :     108
        Regenerable   :       5
        Spilled       :      40
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     312 bytes*
            Reads     :      66 [8.69e+00 ~ 8.7%]
            Writes    :      66 [7.59e+00 ~ 7.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed *, int *, float *)) [17/20=85.0%] d2q9-bgk.c(1148,1)
  -> EXTERN: (1157,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (1161,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (1212,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1216,3) fclose(FILE *)
  -> EXTERN: (1218,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (1222,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (1227,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1230,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(1164,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1212,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (1187:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1212:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1212:7) and cells->speeds1 (1187:9)

   LOOP BEGIN at d2q9-bgk.c(1166,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1212,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (1187:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1212:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (1212:7) and cells->speeds1 (1187:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1225,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(1227,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1148,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:1148

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     151
            Global    :      35
            Local     :     116
        Regenerable   :      44
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [3.89e+00 ~ 3.9%]
            Writes    :       6 [1.19e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [18/20=90.0%] d2q9-bgk.c(1236,1)
  -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1239,3) fflush(FILE *)
  -> EXTERN: (1240,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1236,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:1236

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [19/20=95.0%] d2q9-bgk.c(1244,1)
  -> EXTERN: (1245,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1246,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(1244,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:1244

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_mpi *, t_speed *, t_speed *, t_speed *, int **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_mpi *, t_speed *, t_speed *, t_speed *, int **, int **, float **)) [20/20=100.0%] d2q9-bgk.c(823,83)
  -> EXTERN: (831,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (835,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (836,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (840,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (842,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (844,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (846,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (848,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (850,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (852,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (854,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (856,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (858,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (860,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (862,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (864,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (866,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (869,3) fclose(FILE *)
  -> INLINE: (872,28) get_rows_for_rank(int, int, int) (isz = 4) (sz = 15)
  -> EXTERN: (895,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (896,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (897,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (898,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (899,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (900,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (901,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (902,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (903,32) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (905,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (906,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (907,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (908,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (909,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (910,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (911,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (912,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (913,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (916,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (917,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (918,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (919,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (920,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (921,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (922,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (923,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (924,36) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (926,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (927,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (928,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (929,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (930,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (931,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (932,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (933,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (934,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (938,38) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (939,38) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (940,38) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (941,38) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (942,38) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (943,38) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (944,38) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (945,38) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (946,38) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (948,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (949,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (950,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (951,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (952,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (953,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (954,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (955,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (956,41) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (960,20) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (961,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (964,26) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (965,37) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (1012,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (1016,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1017,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (1020,27) get_start_row(int, int, int) (isz = 6) (sz = 17)
  -> EXTERN: (1030,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (1030,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (1033,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (1035,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (1037,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> INLINE: (1039,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (1237,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1238,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (1239,3) fflush(FILE *)
    -> EXTERN: (1240,3) exit(int)
  -> EXTERN: (1053,3) fclose(FILE *)
  -> EXTERN: (1059,26) malloc(size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(973,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds0[ii+jj*params->nx] (978:7) and cells_ptr->speeds8[ii+jj*params->nx] (988:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds8[ii+jj*params->nx] (988:7) and cells_ptr->speeds0[ii+jj*params->nx] (978:7)

   LOOP BEGIN at d2q9-bgk.c(975,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds0[ii+jj*params->nx] (978:7) and cells_ptr->speeds8[ii+jj*params->nx] (988:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between cells_ptr->speeds8[ii+jj*params->nx] (988:7) and cells_ptr->speeds0[ii+jj*params->nx] (978:7)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(993,3)
   remark #15523: loop was not vectorized: loop control variable jj was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(995,5)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1002,5)
   remark #15523: loop was not vectorized: loop control variable jj was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(1004,7)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(1030,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(823,83):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:823

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :    1224
            Global    :     145
            Local     :    1079
        Regenerable   :     582
        Spilled       :      14
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [9.67e-01 ~ 1.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      64 bytes*
            Reads     :       8 [3.25e+00 ~ 3.3%]
            Writes    :       8 [5.92e-02 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

<2> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "inline __attribute__((always_inline))" to the declaration of
    the called function or add "#pragma forceinline" before the call site.

