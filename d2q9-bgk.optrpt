Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925_000000

Compiler options: -std=c99 -Wall -O3 -xAVX2 -qopenmp -g -qopt-report=5 -simd -lm -o d2q9-bgk

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/11=9.1%] d2q9-bgk.c(134,1)
  -> INLINE: (149,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (861,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (862,3) exit(int)
  -> EXTERN: (158,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> (161,3) initialise(const char *, const char *, t_param *, t_speed *, t_speed *, int **, float **) (isz = 1300) (sz = 1319)
     [[ Inlining would exceed -inline-max-size value (1319>230) <1>]]
  -> EXTERN: (173,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (178,3) accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, const float, const float) (isz = 200) (sz = 215)
  -> (182,19) timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float) (isz = 655) (sz = 680)
     [[ Inlining would exceed -inline-max-size value (680>230) <1>]]
  -> EXTERN: (197,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (204,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (209,3) printf(const char *__restrict__, ...)
  -> EXTERN: (210,3) printf(const char *__restrict__, ...)
  -> INLINE: (210,41) calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__) (isz = 291) (sz = 302)
    -> INLINE: (737,10) av_velocity(const t_param, t_speed *__restrict__, int *__restrict__) (isz = 283) (sz = 294)
  -> EXTERN: (211,3) printf(const char *__restrict__, ...)
  -> EXTERN: (212,3) printf(const char *__restrict__, ...)
  -> EXTERN: (213,3) printf(const char *__restrict__, ...)
  -> EXTERN: (214,3) printf(const char *__restrict__, ...)
  -> (215,3) write_values(const t_param, t_speed *, int *, float *) (isz = 312) (sz = 325)
     [[ Inlining would exceed -inline-max-size value (325>230) <1>]]
  -> INLINE: (216,3) finalise(const t_param *, t_speed *, t_speed *, int **, float **) (isz = 58) (sz = 73)
    -> EXTERN: (703,3) _mm_free(void *)
    -> EXTERN: (704,3) _mm_free(void *)
    -> EXTERN: (705,3) _mm_free(void *)
    -> EXTERN: (706,3) _mm_free(void *)
    -> EXTERN: (707,3) _mm_free(void *)
    -> EXTERN: (708,3) _mm_free(void *)
    -> EXTERN: (709,3) _mm_free(void *)
    -> EXTERN: (710,3) _mm_free(void *)
    -> EXTERN: (711,3) _mm_free(void *)
    -> EXTERN: (713,3) _mm_free(void *)
    -> EXTERN: (714,3) _mm_free(void *)
    -> EXTERN: (715,3) _mm_free(void *)
    -> EXTERN: (716,3) _mm_free(void *)
    -> EXTERN: (717,3) _mm_free(void *)
    -> EXTERN: (718,3) _mm_free(void *)
    -> EXTERN: (719,3) _mm_free(void *)
    -> EXTERN: (720,3) _mm_free(void *)
    -> EXTERN: (721,3) _mm_free(void *)
    -> EXTERN: (723,3) _mm_free(void *)
    -> EXTERN: (726,3) free(void *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(408,3) inlined into d2q9-bgk.c(178,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at d2q9-bgk.c(453,3) inlined into d2q9-bgk.c(210,41)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(179,3)
   remark #15382: vectorization support: call to function timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float) cannot be vectorized   [ d2q9-bgk.c(182,19) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at d2q9-bgk.c(408,3) inlined into d2q9-bgk.c(178,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk.c(408,3) inlined into d2q9-bgk.c(178,3)
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(419,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(419,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(420,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(420,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(421,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(421,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(423,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(423,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(424,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(424,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(425,7) ]
   remark #15389: vectorization support: reference *(cells+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(425,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.203
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 9 
   remark #15457: masked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 46.870 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(408,3) inlined into d2q9-bgk.c(178,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(457,5) inlined into d2q9-bgk.c(210,41)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(457,5) inlined into d2q9-bgk.c(210,41)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(457,5) inlined into d2q9-bgk.c(210,41)
      remark #15389: vectorization support: reference cells[ii+jj*?] has unaligned access   [ d2q9-bgk.c(463,37) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(464,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(466,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(465,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(468,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(469,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(467,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(470,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(471,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(477,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(478,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(479,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(480,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(481,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(482,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(485,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(486,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(487,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(488,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(489,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(490,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.628
      remark #15355: vectorization support: at (493:9) is float type reduction   [ d2q9-bgk.c(493,9) ]
      remark #15355: vectorization support: at (495:11) is int type reduction   [ d2q9-bgk.c(495,11) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 132 
      remark #15477: vector cost: 28.870 
      remark #15478: estimated potential speedup: 3.940 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(457,5) inlined into d2q9-bgk.c(210,41)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(178,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(182,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(210,41):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(737,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(215,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(134,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:134

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     839
            Global    :     137
            Local     :     702
        Regenerable   :     207
        Spilled       :      26
        
    Routine stack
        Variables     :     404 bytes*
            Reads     :      86 [9.42e+00 ~ 9.4%]
            Writes    :      61 [8.26e+00 ~ 8.3%]
        Spills        :     248 bytes*
            Reads     :      65 [3.29e+00 ~ 3.3%]
            Writes    :      49 [1.95e+00 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed *__restrict__, t_speed *__restrict__, int *__restrict__, const int, const float, const float, const float, const float, const float)) [2/11=18.2%] d2q9-bgk.c(230,32)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(263,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(267,5)
   remark #25261: Invariant Condition eliminated(Proven True) at line 276
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(267,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(267,5)
      remark #25259: Invariant Condition eliminated(Loop at level 2 peeled last iter) at line 274
      remark #25261: Invariant Condition eliminated(Proven True) at line 274
      remark #25258: Invariant Condition eliminated(Loop at level 2 peeled) at line 276 
      remark #25260: Invariant Condition eliminated(Proven False) at line 276
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(281,32) ]
      remark #15389: vectorization support: reference cells->speeds1[x_w+jj*?] has unaligned access   [ d2q9-bgk.c(282,32) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+y_s*?] has unaligned access   [ d2q9-bgk.c(283,32) ]
      remark #15389: vectorization support: reference cells->speeds3[x_e+jj*?] has unaligned access   [ d2q9-bgk.c(284,32) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+y_n*?] has unaligned access   [ d2q9-bgk.c(285,32) ]
      remark #15389: vectorization support: reference cells->speeds5[x_w+y_s*?] has unaligned access   [ d2q9-bgk.c(286,32) ]
      remark #15389: vectorization support: reference cells->speeds6[x_e+y_s*?] has unaligned access   [ d2q9-bgk.c(287,32) ]
      remark #15389: vectorization support: reference cells->speeds7[x_e+y_n*?] has unaligned access   [ d2q9-bgk.c(288,32) ]
      remark #15389: vectorization support: reference cells->speeds8[x_w+y_n*?] has unaligned access   [ d2q9-bgk.c(289,32) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(298,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(299,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(300,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(301,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(302,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(303,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(304,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(305,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(344,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(345,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(346,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(347,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(348,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(349,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(350,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(351,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(352,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(373,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(373,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(374,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(374,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(375,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(375,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(377,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(377,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(378,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(378,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(379,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(379,11) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(298,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(299,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(300,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(301,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(302,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(303,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(304,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(305,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds1[ii+jj*?] has unaligned access   [ d2q9-bgk.c(345,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds2[ii+jj*?] has unaligned access   [ d2q9-bgk.c(346,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds3[ii+jj*?] has unaligned access   [ d2q9-bgk.c(347,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds4[ii+jj*?] has unaligned access   [ d2q9-bgk.c(348,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds5[ii+jj*?] has unaligned access   [ d2q9-bgk.c(349,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds6[ii+jj*?] has unaligned access   [ d2q9-bgk.c(350,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds7[ii+jj*?] has unaligned access   [ d2q9-bgk.c(351,9) ]
      remark #15389: vectorization support: reference tmp_cells->speeds8[ii+jj*?] has unaligned access   [ d2q9-bgk.c(352,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.400
      remark #15355: vectorization support: at (357:9) is float type reduction   [ d2q9-bgk.c(357,9) ]
      remark #15355: vectorization support: at (359:11) is int type reduction   [ d2q9-bgk.c(359,11) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 18 
      remark #15451: unmasked unaligned unit stride stores: 22 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 326 
      remark #15477: vector cost: 94.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(267,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(230,32):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:230

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     970
            Global    :     192
            Local     :     778
        Regenerable   :     117
        Spilled       :     119
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :      10 [5.20e-02 ~ 0.1%]
            Writes    :      26 [6.66e-01 ~ 0.7%]
        Spills        :    1232 bytes*
            Reads     :     305 [1.87e+01 ~ 18.7%]
            Writes    :     171 [6.23e+00 ~ 6.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed *, int *, float *)) [3/11=27.3%] d2q9-bgk.c(764,1)
  -> EXTERN: (773,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (777,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (828,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (832,3) fclose(FILE *)
  -> EXTERN: (834,8) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (838,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (843,5) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (846,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(780,3)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(828,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (803:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (828:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (828:7) and cells->speeds1 (803:9)

   LOOP BEGIN at d2q9-bgk.c(782,5)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(828,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speeds1 (803:9) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (828:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (828:7) and cells->speeds1 (803:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(841,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(843,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(764,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:764

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     151
            Global    :      35
            Local     :     116
        Regenerable   :      44
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [3.89e+00 ~ 3.9%]
            Writes    :       6 [1.19e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, const float, const float)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed *__restrict__, int *__restrict__, const float, const float)) [4/11=36.4%] d2q9-bgk.c(389,1)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(408,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(408,3)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk.c(408,3)
   remark #15389: vectorization support: reference *(cells->speeds1+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(419,7) ]
   remark #15389: vectorization support: reference *(cells->speeds1+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(419,7) ]
   remark #15389: vectorization support: reference *(cells->speeds5+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(420,7) ]
   remark #15389: vectorization support: reference *(cells->speeds5+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(420,7) ]
   remark #15389: vectorization support: reference *(cells->speeds8+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(421,7) ]
   remark #15389: vectorization support: reference *(cells->speeds8+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(421,7) ]
   remark #15389: vectorization support: reference *(cells->speeds3+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(423,7) ]
   remark #15389: vectorization support: reference *(cells->speeds3+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(423,7) ]
   remark #15389: vectorization support: reference *(cells->speeds6+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(424,7) ]
   remark #15389: vectorization support: reference *(cells->speeds6+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(424,7) ]
   remark #15389: vectorization support: reference *(cells->speeds7+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(425,7) ]
   remark #15389: vectorization support: reference *(cells->speeds7+(ii+jj*U6_V)*4) has unaligned access   [ d2q9-bgk.c(425,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.203
   remark #15301: SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 9 
   remark #15457: masked unaligned unit stride stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 46.870 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(408,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(389,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:389

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     253
            Global    :      54
            Local     :     199
        Regenerable   :      58
        Spilled       :       5
        
    Routine stack
        Variables     :      52 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :      10 [5.89e+00 ~ 5.9%]
        Spills        :      80 bytes*
            Reads     :      20 [3.49e+00 ~ 3.5%]
            Writes    :      15 [5.11e+00 ~ 5.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed *__restrict__, int *__restrict__)) [5/11=45.5%] d2q9-bgk.c(433,1)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(453,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(457,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(457,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(457,5)
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*?] has unaligned access   [ d2q9-bgk.c(463,37) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(464,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(465,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(466,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(467,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(468,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(469,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(470,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(471,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(477,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(478,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(479,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(480,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(481,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(482,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(485,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(486,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(487,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(488,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(489,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(490,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.628
      remark #15355: vectorization support: at (493:9) is float type reduction   [ d2q9-bgk.c(493,9) ]
      remark #15355: vectorization support: at (495:11) is int type reduction   [ d2q9-bgk.c(495,11) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 132 
      remark #15477: vector cost: 28.870 
      remark #15478: estimated potential speedup: 3.940 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(457,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(433,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:433

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     410
            Global    :      57
            Local     :     353
        Regenerable   :      84
        Spilled       :      10
        
    Routine stack
        Variables     :      64 bytes*
            Reads     :      10 [2.20e-01 ~ 0.2%]
            Writes    :      19 [2.05e+00 ~ 2.0%]
        Spills        :     120 bytes*
            Reads     :      34 [1.93e+00 ~ 1.9%]
            Writes    :      26 [2.06e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, t_speed *, t_speed *, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, t_speed *, t_speed *, int **, float **)) [6/11=54.5%] d2q9-bgk.c(699,1)
  -> EXTERN: (703,3) _mm_free(void *)
  -> EXTERN: (704,3) _mm_free(void *)
  -> EXTERN: (705,3) _mm_free(void *)
  -> EXTERN: (706,3) _mm_free(void *)
  -> EXTERN: (707,3) _mm_free(void *)
  -> EXTERN: (708,3) _mm_free(void *)
  -> EXTERN: (709,3) _mm_free(void *)
  -> EXTERN: (710,3) _mm_free(void *)
  -> EXTERN: (711,3) _mm_free(void *)
  -> EXTERN: (713,3) _mm_free(void *)
  -> EXTERN: (714,3) _mm_free(void *)
  -> EXTERN: (715,3) _mm_free(void *)
  -> EXTERN: (716,3) _mm_free(void *)
  -> EXTERN: (717,3) _mm_free(void *)
  -> EXTERN: (718,3) _mm_free(void *)
  -> EXTERN: (719,3) _mm_free(void *)
  -> EXTERN: (720,3) _mm_free(void *)
  -> EXTERN: (721,3) _mm_free(void *)
  -> EXTERN: (723,3) _mm_free(void *)
  -> EXTERN: (726,3) free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(699,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:699

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8 r12-r13]
        
    Routine temporaries
        Total         :      56
            Global    :      10
            Local     :      46
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed *__restrict__, int *__restrict__)) [7/11=63.6%] d2q9-bgk.c(734,1)
  -> INLINE: (737,10) av_velocity(const t_param, t_speed *__restrict__, int *__restrict__) (isz = 283) (sz = 294)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(453,3) inlined into d2q9-bgk.c(737,10)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(457,5) inlined into d2q9-bgk.c(737,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(457,5) inlined into d2q9-bgk.c(737,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(457,5) inlined into d2q9-bgk.c(737,10)
      remark #15389: vectorization support: reference cells[ii+jj*?] has unaligned access   [ d2q9-bgk.c(463,37) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(464,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(466,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(465,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(468,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(469,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(467,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(470,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(471,39) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(477,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(478,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(479,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(480,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(481,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(482,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(485,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(486,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(487,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(488,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(489,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*?)*4) has unaligned access   [ d2q9-bgk.c(490,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.628
      remark #15355: vectorization support: at (493:9) is float type reduction   [ d2q9-bgk.c(493,9) ]
      remark #15355: vectorization support: at (495:11) is int type reduction   [ d2q9-bgk.c(495,11) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 132 
      remark #15477: vector cost: 28.870 
      remark #15478: estimated potential speedup: 3.940 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(457,5) inlined into d2q9-bgk.c(737,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(737,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(734,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:734

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     419
            Global    :      58
            Local     :     361
        Regenerable   :      91
        Spilled       :      11
        
    Routine stack
        Variables     :      92 bytes*
            Reads     :      10 [2.17e-01 ~ 0.2%]
            Writes    :      22 [2.34e+00 ~ 2.3%]
        Spills        :     128 bytes*
            Reads     :      34 [2.06e+00 ~ 2.1%]
            Writes    :      27 [2.08e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed *)) [8/11=72.7%] d2q9-bgk.c(741,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(744,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(746,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(746,5)
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(748,16) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(749,16) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(750,16) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(751,16) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(752,16) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(753,16) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(754,16) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(755,16) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(756,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(742,15) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(746,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speeds0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(748,16) ]
      remark #15389: vectorization support: reference cells->speeds1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(749,16) ]
      remark #15389: vectorization support: reference cells->speeds2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(750,16) ]
      remark #15389: vectorization support: reference cells->speeds3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(751,16) ]
      remark #15389: vectorization support: reference cells->speeds4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(752,16) ]
      remark #15389: vectorization support: reference cells->speeds5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(753,16) ]
      remark #15389: vectorization support: reference cells->speeds6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(754,16) ]
      remark #15389: vectorization support: reference cells->speeds7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(755,16) ]
      remark #15389: vectorization support: reference cells->speeds8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk.c(756,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15355: vectorization support: total is float type reduction   [ d2q9-bgk.c(742,15) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(746,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(741,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:741

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     171
            Global    :      63
            Local     :     108
        Regenerable   :       5
        Spilled       :      40
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     312 bytes*
            Reads     :      65 [8.54e+00 ~ 8.5%]
            Writes    :      66 [7.59e+00 ~ 7.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [9/11=81.8%] d2q9-bgk.c(852,1)
  -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (855,3) fflush(FILE *)
  -> EXTERN: (856,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(852,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:852

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [10/11=90.9%] d2q9-bgk.c(860,1)
  -> EXTERN: (861,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (862,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(860,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:860

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed *, t_speed *, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_speed *, t_speed *, int **, float **)) [11/11=100.0%] d2q9-bgk.c(506,1)
  -> EXTERN: (514,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (518,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (519,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (523,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (525,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (527,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (529,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (531,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (533,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (535,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (537,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (539,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (541,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (543,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (545,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (547,12) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (549,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (552,3) fclose(FILE *)
  -> EXTERN: (575,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (576,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (577,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (578,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (579,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (580,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (581,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (582,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (583,32) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (585,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (586,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (587,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (588,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (589,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (590,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (591,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (592,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (593,35) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (596,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (597,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (598,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (599,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (600,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (601,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (602,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (603,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (604,36) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (606,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (607,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (608,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (609,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (610,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (611,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (612,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (613,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (614,39) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (617,20) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (619,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (661,8) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (665,5) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (666,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (670,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (670,20) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (673,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (675,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (677,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> INLINE: (679,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (853,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (854,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (855,3) fflush(FILE *)
    -> EXTERN: (856,3) exit(int)
  -> EXTERN: (686,3) fclose(FILE *)
  -> EXTERN: (692,26) malloc(size_t)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at d2q9-bgk.c(627,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at d2q9-bgk.c(650,3)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(670,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at d2q9-bgk.c(628,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(631,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(631,5)
      remark #15389: vectorization support: reference cells_ptr->speeds0[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(634,7) ]
      remark #15389: vectorization support: reference cells_ptr->speeds1[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(636,7) ]
      remark #15389: vectorization support: reference cells_ptr->speeds2[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(637,7) ]
      remark #15389: vectorization support: reference cells_ptr->speeds3[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(638,7) ]
      remark #15389: vectorization support: reference cells_ptr->speeds4[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(639,7) ]
      remark #15389: vectorization support: reference cells_ptr->speeds5[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(641,7) ]
      remark #15389: vectorization support: reference cells_ptr->speeds6[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(642,7) ]
      remark #15389: vectorization support: reference cells_ptr->speeds7[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(643,7) ]
      remark #15389: vectorization support: reference cells_ptr->speeds8[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(644,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 5.370 
      remark #15478: estimated potential speedup: 4.860 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(631,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(651,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(654,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(654,5)
      remark #15389: vectorization support: reference *obstacles_ptr[ii+jj*params->nx] has unaligned access   [ d2q9-bgk.c(656,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 5.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(654,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(506,1):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:506

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1207
            Global    :     175
            Local     :    1032
        Regenerable   :     544
        Spilled       :      31
        
    Routine stack
        Variables     :    1132 bytes*
            Reads     :      51 [3.89e+00 ~ 3.9%]
            Writes    :      15 [1.75e+00 ~ 1.8%]
        Spills        :     288 bytes*
            Reads     :      75 [4.23e+00 ~ 4.2%]
            Writes    :      73 [3.93e+00 ~ 3.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

